name: CMake

on:
  push:
    branches:
      - master
      - feature/*
  pull_request:
    branches:
      - master
      - feature/*

permissions:
  checks: write
  pull-requests: write

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: git submodule
      shell: bash
      run: git submodule update --init --recursive

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: CTest
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{env.BUILD_TYPE}}  --verbose

    - name: Test
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{github.workspace}}/build
      run: |
        ${{github.workspace}}/build/bin/tests-custom --gtest_output=xml:output/
        ${{github.workspace}}/build/bin/tests-shared --gtest_output=xml:output/

    - name: Test
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}/build
      run: |
        ${{github.workspace}}\build\bin\${{env.BUILD_TYPE}}\tests-custom --gtest_output=xml:output\
        ${{github.workspace}}\build\bin\${{env.BUILD_TYPE}}\tests-shared --gtest_output=xml:output\

    - name: Show Output
      working-directory: ${{github.workspace}}/build
      if: runner.os == 'Linux'
      run: |
        find output

    - name: Upload Test Results
      uses: actions/upload-artifact@v2
      with:
        name: test-results
        path: ${{github.workspace}}/build/output

    - name: Publish Test Results(Linux)
      uses: EnricoMi/publish-unit-test-result-action/linux@v2
      if: runner.os == 'Linux'
      with:
        files: |
          ${{github.workspace}}/build/output/*.xml

    - name: Publish Test Results(Windows)
      uses: EnricoMi/publish-unit-test-result-action/windows@v2
      if: runner.os == 'Windows'
      with:
        files: |
          ${{github.workspace}}\build\output\*.xml
