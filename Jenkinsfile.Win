#!/usr/bin/env groovy

pipeline  {
	environment {
		nuget = 'C:/Program Files (x86)/NuGet/nuget.exe'
		cmake = 'C:/Program Files/CMake/bin/cmake.exe'
		vcvarsall = 'C:/Program Files (x86)/Microsoft Visual Studio/2017/Community/VC/Auxiliary/Build/vcvarsall.bat'
	}
	agent any
	
	stages {
		stage('Checkout') {
			steps {
				checkout scm
				bat 'git submodule update --init'
				
				script {
					def commitHash = "${GIT_COMMIT}"
					def branchName = "${GIT_BRANCH}"
					def shortHash = commitHash.take(8)
					currentBuild.displayName = "#${BUILD_NUMBER}-${branchName}-${shortHash}"
				}
			}
		}
		stage('setup') {
			steps {
				script {
					bat ("call \"%vcvarsall%\" x86")
					bat ("cd /d ${env.WORKSPACE}")
				}
			}
		}
		stage('configure') {
			parallel {
				stage('configure-Build-on') {
					steps {
						script {
							def	BUILD_DIR = "${env.WORKSPACE}\\build-on"
							def BUILD_SHARED_LIBS = "1"
							bat ("echo ${BUILD_DIR}")
							bat ("cd")
							bat ("if exist ${BUILD_DIR} rmdir /s /q ${BUILD_DIR}")
							bat ("mkdir ${BUILD_DIR}")
							bat ("\"%cmake%\" -D BUILD_SHARED_LIBS=${BUILD_SHARED_LIBS} -B${BUILD_DIR} -H${env.WORKSPACE}")
						}
					}
				}
				stage('configure-Build-off') {
					steps {
						script {
							def	BUILD_DIR = "${env.WORKSPACE}\\build-off"
							def BUILD_SHARED_LIBS = "0"
							bat ("echo ${BUILD_DIR}")
							bat ("cd")
							bat ("if exist ${BUILD_DIR} rmdir /s /q ${BUILD_DIR}")
							bat ("mkdir ${BUILD_DIR}")
							bat ("\"%cmake%\" -D BUILD_SHARED_LIBS=${BUILD_SHARED_LIBS} -B${BUILD_DIR} -H${env.WORKSPACE}")
						}
					}
				}
			}
		}
		stage('build') {
			parallel {
				stage('Build-on-Debug') {
					steps {
						script {
							def	BUILD_DIR = "${env.WORKSPACE}\\build-on"
							bat ("\"%cmake%\" --build ${BUILD_DIR} --config Debug")
						}
					}
				}
				stage('Build-on-Release') {
					steps {
						script {
							def	BUILD_DIR = "${env.WORKSPACE}\\build-on"
							bat ("\"%cmake%\" --build ${BUILD_DIR} --config Release")
						}
					}
				}
				stage('Build-off-Debug') {
					steps {
						script {
							def	BUILD_DIR = "${env.WORKSPACE}\\build-off"
							bat ("\"%cmake%\" --build ${BUILD_DIR} --config Debug")
						}
					}
				}
				stage('Build-off-Release') {
					steps {
						script {
							def	BUILD_DIR = "${env.WORKSPACE}\\build-off"
							bat ("\"%cmake%\" --build ${BUILD_DIR} --config Release")
						}
					}
				}
			}
		}
		stage('Test') {
			steps {
				script {
					bat ("call ${env.WORKSPACE}\\run-tests.bat")
				}
			}
		}
		stage('Archive-on') {
			steps {
				script {
					archiveArtifacts artifacts: "build-on/bin/Release/*.dll"
					archiveArtifacts artifacts: "build-on/bin/Release/*.exe"
				}
			}
		}		
		stage('Archive-off') {
			steps {
				script {
					archiveArtifacts artifacts: "build-off/bin/Release/*.exe"
				}
			}
		}
	}
}
